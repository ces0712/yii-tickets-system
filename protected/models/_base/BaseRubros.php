<?php

/**
 * This is the model base class for the table "rubros".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Rubros".
 *
 * Columns in table "rubros" available as properties of the model,
 * followed by relations of table "rubros" available as properties of the model.
 *
 * @property integer $id
 * @property boolean $estatus
 * @property string $rubros
 *
 * @property Tickets[] $tickets
 * @property Jornada[] $jornadas
 * @property Jornadarubro[] $jornadarubros
 * @property Historicorubros[] $historicorubroses
 */
abstract class BaseRubros extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'rubros';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Rubro|Rubros', $n);
	}

	public static function representingColumn() {
		return 'rubros';
	}

	public function rules() {
		return array(
			array('rubros', 'required'),
			array('rubros', 'unique', 'message' => "Rubro ya registrado"),
			array('estatus', 'safe'),
			array('estatus', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, estatus, rubros', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'tickets' => array(self::HAS_MANY, 'Tickets', 'rubro_id'),
			'jornadas' => array(self::HAS_MANY, 'Jornada', 'id_rubro'),
			'jornadarubros' => array(self::HAS_MANY, 'Jornadarubro', 'id_rubro'),
			'historicorubroses' => array(self::HAS_MANY, 'Historicorubros', 'rubro_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'estatus' => Yii::t('app', 'Estatus'),
			'rubros' => Yii::t('app', 'Rubros'),
			'tickets' => null,
			'jornadas' => null,
			'jornadarubros' => null,
			'historicorubroses' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('estatus', $this->estatus);
		$criteria->compare('rubros', $this->rubros, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

 

}
